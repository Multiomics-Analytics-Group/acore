# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.17.3
#   kernelspec:
#     display_name: .venv
#     language: python
#     name: python3
# ---

# %% [markdown]
# # Tutorial: Permutation Testing using `acore`
#
# In this notebook we will demonstrate how to use acore's permutation testing functions on metagenomics data collected by [Ju and colleagues (2018)](https://doi.org/10.1038/s41396-018-0277-8).
#
# The samples in this demo were collected from wastewaster treatment plant inffluent (MGYS00005056) and effluent (MGYS00005058).
#
# For this demo we look at the GO term abundance tables generated by the Mgnify pipeline. The values in the table are the absolute abundance of selected GO terms for each sample, which we then transform to relative abundances and centred-log ratios.
#

# %% [markdown]
# ## Data preparation details
#
# ### Downloading
# The analysed samples were downloaded via the [MGnify API](https://www.ebi.ac.uk/metagenomics/api/docs/). The inffluent (INF) and effluent (EFFF) datasets have paired samples and we also needed to download the sample metadata (also available via Mgnify API) to assign the correct pairing.
#
# ### Preprocessing of abundances
# - To account for technical variation due to sequencing technology limitations, we first transform the abundance values so they are relative to the total reads for the sample aka getting relative abundances.
# - The relative abundances are compositional data (CoDa) so we map them to unconstrained vectors using centred log-ratio transformation `acore.microbiome.internal_functions.calc_clr()` to not violate assumptions of any frequentist stats we do
#
# ### Preprocessing of the metadata
# - the sample metadata needed for this demo (sampling location) were available in their "sample-desc"
# - the sample-desc for each sample in both INF and EFF were parsed and used for pairing off
#
# ### Subset of data for demo
# - For this demo we only look at [go term GO:0017001](https://www.ebi.ac.uk/QuickGO/term/GO:0017001)
# - It's expected that antibiotic catabolic processes to be higher in INF vs EFF
#
# ### Saving the demo dataset
# This example subset of data was saved to a CSV, ./example_data/mgnify/Ju2018_GO0017001_enf_inf_paired.csv. The data dictionary is below:
#
# | column            | description                                                                                                       | dtype |
# |-------------------|-------------------------------------------------------------------------------------------------------------------|-------|
# | eff_id            | The run id for the mgnify analysis of the effluent sample.                                                        | str   |
# | inf_id            | The run id for the mgnify analysis of the influent sample.                                                        | str   |
# | sampling_location | [The ISO 3166-1 alpha-2 code](http://iso.org/obp/ui/#iso:pub:PUB500001:en) for the country where the sample was from. | str   |
# | sampling_read     | Replicates?                                                                                                       | str   |
# | eff_abundance     | The relative abundance of the GO term for a given effluent sample following preprocessing (i.e., CoDA and CLR)    | float |
# | inf_abundance     | The relative abundance of the GO term for a given influent sample following preprocessing (i.e., CoDA and CLR)    | float |
#
# -----
#
# We will now proceed with reading in the prepared dataset.

# %%
import pandas as pd

df_data = pd.read_csv(
    "https://raw.githubusercontent.com/Multiomics-Analytics-Group/acore/refs/heads/anglup-learning/example_data/mgnify/Ju2018_GO0017001_enf_inf_paired.csv"
)
# sanity check
df_data.head()

# %% [markdown]
# ## The permutation test
#
# Since these are paird samples we will proceed with paired sample permutation test using `acore.perumutation_test.paired_permutation()`.
#
# The permutation test compares the actual observed chosen metric (e.g., t-statistic, mean difference) with metrics calculated when the dataset values are randomly shuffled permutations of the dataset.
#
# If we do 100 permutations of our data (although we should do a bunch more) and only 1 of those permutations falsely showed a larger effect size than the actual observed effect than it suggests there is a 1/100 chance (p value of 0.01) of the observed effect sizze having occurred by chance.

# %%
from acore.permutation_test import paired_permutation

# optional choice of random number generatorfor repro
import numpy as np

rng = np.random.default_rng(12345)

# %%
# trying diff metrics to demo functionality also
for metric in ["t-statistic", "mean", np.mean]:
    result = paired_permutation(
        df_data["inf_abundance"].to_numpy(),
        df_data["eff_abundance"].to_numpy(),
        metric=metric,
        n_permutations=10000,
        rng=rng,
    )
    # verbosity
    print(result)

# %% [markdown]
# ## Result
#
# Based on the permutation tests by test statistic and mean difference, the probability of the observed metrics (t=6.739 and mean diff=0.535) occurring at random would be <0.00001.
